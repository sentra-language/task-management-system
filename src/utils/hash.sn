// Hash Utility - Password hashing (mock implementation)

export fn hash_password(password) {
    // In production, use proper crypto hashing
    // This is a simple mock implementation
    let hash = "hash_"
    
    let password_str = str(password)
    let password_len = len(password_str)
    
    // Workaround: Use while loop instead of for-in
    let i = 0
    while i < password_len {
        // Simple character manipulation
        let char = char_at(password_str, i)
        let code = char_code(char)
        hash = hash + str(code * 7 % 256)
        i = i + 1
    }
    
    return hash + "_salt"
}

export fn verify_password(password, hash) {
    // Verify password against hash
    let test_hash = hash_password(password)
    return test_hash == hash
}

export fn generate_salt() {
    // Generate random salt
    let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    let salt = ""
    
    // Workaround: Use while loop instead of for-in
    let i = 0
    while i < 16 {
        let index = i * 7 % len(chars)
        salt = salt + char_at(chars, index)
        i = i + 1
    }
    
    return salt
}

export fn hash_string(str_val) {
    // Simple string hashing
    let hash = 0
    let str_data = str(str_val)
    
    let str_len = len(str_data)
    
    // Workaround: Use while loop instead of for-in
    let i = 0
    while i < str_len {
        let char = char_at(str_data, i)
        let code = char_code(char)
        hash = (hash * 31 + code) % 1000000
        i = i + 1
    }
    
    return str(hash)
}