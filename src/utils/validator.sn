// Validator Utility - Input validation functions

export fn is_valid_email(email) {
    if !email {
        return false
    }
    
    // Convert to string
    let email_str = str(email)
    
    // Check for @ symbol
    let at_count = 0
    let at_pos = -1
    
    let email_len = len(email_str)
    let indices = range(0, email_len)
    
    for i in indices {
        // Convert i to ensure it's a number
        let idx = i + 0  // Force numeric context
        let ch = char_at(email_str, idx)
        if ch == "@" {
            at_count = at_count + 1
            at_pos = idx
        }
    }
    
    // Must have exactly one @
    if at_count != 1 {
        return false
    }
    
    // @ can't be first or last
    if at_pos == 0 || at_pos == len(email_str) - 1 {
        return false
    }
    
    // Must have domain after @
    let domain_part = slice(email_str, at_pos + 1)
    if !(contains(domain_part, ".")) {
        return false
    }
    
    return true
}

export fn is_valid_username(username) {
    if !username {
        return false
    }
    
    let username_str = str(username)
    
    if len(username_str) < 3 {
        return false
    }
    
    if len(username_str) > 20 {
        return false
    }
    
    // Only allow alphanumeric and underscore
    let valid_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"
    let username_len = len(username_str)
    
    // Workaround: Use while loop instead of for-in
    let j = 0
    while j < username_len {
        let char = char_at(username_str, j)
        if !(contains(valid_chars, char)) {
            return false
        }
        j = j + 1
    }
    
    return true
}

export fn is_valid_password(password) {
    if !password {
        return false
    }
    
    let password_str = str(password)
    
    if len(password_str) < 8 {
        return false
    }
    
    let has_upper = false
    let has_lower = false
    let has_number = false
    
    let password_len = len(password_str)
    
    // Workaround: Use while loop instead of for-in
    let k = 0
    while k < password_len {
        let char = char_at(password_str, k)
        if contains("ABCDEFGHIJKLMNOPQRSTUVWXYZ", char) {
            has_upper = true
        }
        if contains("abcdefghijklmnopqrstuvwxyz", char) {
            has_lower = true
        }
        if contains("0123456789", char) {
            has_number = true
        }
        k = k + 1
    }
    
    return has_upper && has_lower && has_number
}

export fn is_valid_string(str_val) {
    return str_val != null && len(str(str_val)) > 0
}

export fn is_valid_priority(priority) {
    // Simple priority validation
    return priority == "High" || priority == "Medium" || priority == "Low"
}

export fn is_valid_status(status) {
    // Simple status validation
    return status == "pending" || status == "in_progress" || status == "completed"
}

export fn is_valid_id(id) {
    return id != null
}

export fn sanitize_string(str_val) {
    if !str_val {
        return ""
    }
    return str(str_val)
}