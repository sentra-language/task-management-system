// Application Core Logic with SQLite Database

import "./controllers/task_controller.sn" as TaskController
import "./controllers/user_controller.sn" as UserController
import "./services/database_sqlite.sn" as db
import "./services/auth.sn" as auth
import "./utils/logger.sn" as logger
import "./utils/hash.sn" as hash
import "../config/settings.sn" as config

let app_state = {
    "running": false,
    "current_user": null
}

export fn initialize() {
    logger.info("Initializing application with SQLite...")
    
    // Initialize SQLite database
    db.init_database()
    logger.info("SQLite database initialized")
    
    // Create default admin user if it doesn't exist
    let admin = db.get_user("admin")
    if !admin {
        let password_hash = hash.hash_password("admin123")
        db.create_user("admin", "admin@taskmanager.com", password_hash)
        logger.info("Default admin user created")
    }
    
    logger.info("Application initialized successfully")
}

export fn run() {
    app_state["running"] = true
    logger.info("Application started")
    
    // Demo: User registration
    demo_user_registration()
    
    // Demo: User login
    let user = demo_login("john_doe", "secure123")
    if user {
        app_state["current_user"] = user
        logger.info("User logged in: " + user["username"])
        
        // Demo: Task management
        demo_task_management(user["id"])
        
        // Demo: Show statistics
        show_statistics(user["id"])
        
        // Demo: Search tasks
        demo_search(user["id"])
    }
    
    logger.info("Shutting down application...")
    shutdown()
}

fn demo_user_registration() {
    logger.info("")
    logger.info("=== User Registration Demo ===")
    
    // Register new users
    let users = [
        ["john_doe", "john@example.com", "secure123"],
        ["jane_smith", "jane@example.com", "pass456"],
        ["bob_wilson", "bob@example.com", "bobby789"]
    ]
    
    for user_data in users {
        let existing = db.get_user(user_data[0])
        if !existing {
            let password_hash = hash.hash_password(user_data[2])
            if db.create_user(user_data[0], user_data[1], password_hash) {
                logger.info("Registered user: " + user_data[0])
            }
        } else {
            logger.info("User already exists: " + user_data[0])
        }
    }
}

fn demo_login(username, password) {
    logger.info("")
    logger.info("=== Login Demo ===")
    
    let user = db.get_user(username)
    if user {
        let password_hash = hash.hash_password(password)
        if user["password_hash"] == password_hash {
            logger.info("Login successful for: " + username)
            return user
        } else {
            logger.error("Invalid password for: " + username)
        }
    } else {
        logger.error("User not found: " + username)
    }
    return null
}

fn demo_task_management(user_id) {
    logger.info("")
    logger.info("=== Task Management Demo ===")
    
    // Create sample tasks
    let tasks = [
        ["Complete project documentation", "Write comprehensive docs for the new feature", "High"],
        ["Review pull requests", "Review and merge pending PRs", "Medium"],
        ["Fix bug in authentication", "Users reporting login issues", "High"],
        ["Update dependencies", "Update all npm packages to latest versions", "Low"],
        ["Write unit tests", "Add tests for new components", "Medium"],
        ["Optimize database queries", "Some queries are running slow", "High"]
    ]
    
    logger.info("Creating tasks...")
    for task_data in tasks {
        if db.create_task(user_id, task_data[0], task_data[1], task_data[2]) {
            logger.info("  Created: " + task_data[0])
        }
    }
    
    // Get all tasks
    logger.info("")
    logger.info("Current Tasks:")
    let user_tasks = db.get_tasks(user_id)
    for task in user_tasks {
        logger.info("  [" + task["priority"] + "] " + task["title"] + " - " + task["status"])
    }
    
    // Update some task statuses
    logger.info("")
    logger.info("Updating task statuses...")
    if len(user_tasks) > 0 {
        // Mark first task as in_progress
        if db.update_task_status(user_tasks[0]["id"], "in_progress") {
            logger.info("  Task '" + user_tasks[0]["title"] + "' marked as in_progress")
        }
        
        // Mark second task as completed if exists
        if len(user_tasks) > 1 {
            if db.update_task_status(user_tasks[1]["id"], "completed") {
                logger.info("  Task '" + user_tasks[1]["title"] + "' marked as completed")
            }
        }
    }
}

fn show_statistics(user_id) {
    logger.info("")
    logger.info("=== Task Statistics ===")
    
    let stats = db.get_task_stats(user_id)
    
    logger.info("Total tasks: " + str(stats["total"]))
    
    logger.info("")
    logger.info("By Status:")
    for status_stat in stats["by_status"] {
        logger.info("  " + status_stat["status"] + ": " + str(status_stat["count"]))
    }
    
    logger.info("")
    logger.info("By Priority:")
    for priority_stat in stats["by_priority"] {
        logger.info("  " + priority_stat["priority"] + ": " + str(priority_stat["count"]))
    }
}

fn demo_search(user_id) {
    logger.info("")
    logger.info("=== Search Demo ===")
    
    let keyword = "bug"
    logger.info("Searching for: '" + keyword + "'")
    
    let results = db.search_tasks(user_id, keyword)
    if len(results) > 0 {
        logger.info("Found " + str(len(results)) + " matching tasks:")
        for task in results {
            logger.info("  - " + task["title"])
        }
    } else {
        logger.info("No tasks found matching: " + keyword)
    }
}

export fn shutdown() {
    app_state["running"] = false
    
    // Close database connection
    db.close_database()
    logger.info("Database connection closed")
    
    logger.info("Application stopped")
}