// Application Core Logic

import "./controllers/task_controller.sn" as TaskController
import "./controllers/user_controller.sn" as UserController
import "./services/database.sn" as db
import "./services/auth.sn" as auth
import "./utils/logger.sn" as logger
import "../config/settings.sn" as config

let app_state = {
    "running": false,
    "users": [],
    "tasks": [],
    "current_user": null
}

export fn initialize() {
    logger.info("Initializing application...")
    
    // Connect to database
    if config.DATABASE_ENABLED {
        db.connect(config.DATABASE_URL)
        logger.info("Database connected")
    }
    
    // Load initial data
    app_state["users"] = UserController.load_users()
    app_state["tasks"] = TaskController.load_tasks()
    
    logger.info("Application initialized successfully")
}

export fn run() {
    app_state["running"] = true
    logger.info("Application started")
    
    // Simulate user login
    let user = auth.login("admin", "password123")
    if user {
        app_state["current_user"] = user
        logger.info("User logged in: " + user["username"])
        
        // Demo: Create and manage tasks
        demo_task_management()
        
        // Demo: Show user statistics
        show_statistics()
        
        // Logout
        auth.logout()
        logger.info("User logged out")
    } else {
        logger.error("Authentication failed")
    }
    
    shutdown()
}

fn demo_task_management() {
    logger.info("")
    logger.info("=== Task Management Demo ===")
    
    // Create new tasks
    let task1 = TaskController.create_task(
        "Implement user authentication",
        "High",
        app_state["current_user"]["id"]
    )
    
    let task2 = TaskController.create_task(
        "Write unit tests",
        "Medium",
        app_state["current_user"]["id"]
    )
    
    let task3 = TaskController.create_task(
        "Update documentation",
        "Low",
        app_state["current_user"]["id"]
    )
    
    // List all tasks
    logger.info("")
    logger.info("Current Tasks:")
    let tasks = TaskController.get_all_tasks()
    for task in tasks {
        logger.info("  - [" + task["priority"] + "] " + task["title"] + " (ID: " + task["id"] + ")")
    }
    
    // Complete a task
    TaskController.complete_task(task1["id"])
    logger.info("")
    logger.info("Completed task: " + task1["title"])
    
    // Get pending tasks
    let pending = TaskController.get_pending_tasks()
    logger.info("Pending tasks: " + len(pending))
}

fn show_statistics() {
    logger.info("")
    logger.info("=== Statistics ===")
    
    let stats = TaskController.get_statistics()
    logger.info("Total tasks: " + stats["total"])
    logger.info("Completed: " + stats["completed"])
    logger.info("Pending: " + stats["pending"])
    logger.info("High priority: " + stats["high_priority"])
}

fn shutdown() {
    logger.info("")
    logger.info("Shutting down application...")
    
    if config.DATABASE_ENABLED {
        db.disconnect()
    }
    
    app_state["running"] = false
    logger.info("Application stopped")
}