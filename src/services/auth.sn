// Authentication Service

import "../controllers/user_controller.sn" as UserController
import "../utils/logger.sn" as logger

let current_session = null

export fn login(username, password) {
    logger.info("[Auth] Login attempt for: " + username)
    
    let user = UserController.authenticate(username, password)
    if user {
        // Create session
        current_session = {
            "user": user,
            "token": generate_token(),
            "expires_at": time() + 3600,  // 1 hour
            "created_at": time()
        }
        
        logger.info("[Auth] Login successful for: " + username)
        return user
    }
    
    logger.warning("[Auth] Login failed for: " + username)
    return null
}

export fn logout() {
    if current_session {
        logger.info("[Auth] Logout for: " + current_session["user"]["username"])
        current_session = null
    }
}

export fn get_current_user() {
    if !current_session {
        return null
    }
    
    // Check if session expired
    if current_session["expires_at"] < time() {
        logger.info("[Auth] Session expired")
        current_session = null
        return null
    }
    
    return current_session["user"]
}

export fn is_authenticated() {
    return get_current_user() != null
}

export fn require_auth() {
    if !is_authenticated() {
        throw "Authentication required"
    }
}

export fn require_admin() {
    require_auth()
    
    let user = get_current_user()
    if user["role"] != "admin" {
        throw "Admin privileges required"
    }
}

fn generate_token() {
    // Simple token generation (in production, use crypto)
    let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    let token = ""
    
    for i in range(0, 32) {
        let index = rand() * len(chars)
        token = token + chars[index]
    }
    
    return token
}

// Mock random number generator
fn rand() {
    // Returns a number between 0 and 1
    return 0.5  // Mock implementation
}