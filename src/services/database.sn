// Database Service - Mock database implementation

let connection = null
let data = {
    "users": [],
    "tasks": []
}

export fn connect(url) {
    // Simulate database connection
    connection = {
        "url": url,
        "connected": true,
        "timestamp": time()
    }
    
    log("[DB] Connected to: " + url)
    return true
}

export fn disconnect() {
    if connection {
        connection["connected"] = false
        log("[DB] Disconnected")
    }
}

export fn is_connected() {
    return connection && connection["connected"]
}

export fn save(collection, document) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    if !has_key(data, collection) {
        data[collection] = []
    }
    
    push(data[collection], document)
    log("[DB] Saved to " + collection + ": " + document["id"])
    return document
}

export fn find(collection, id) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    if !has_key(data, collection) {
        return null
    }
    
    for doc in data[collection] {
        if doc["id"] == id {
            return doc
        }
    }
    
    return null
}

export fn find_all(collection) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    if !has_key(data, collection) {
        return []
    }
    
    return data[collection]
}

export fn update(collection, id, updates) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    let doc = find(collection, id)
    if !doc {
        throw "Document not found"
    }
    
    // Apply updates
    for key in keys(updates) {
        doc[key] = updates[key]
    }
    
    log("[DB] Updated in " + collection + ": " + id)
    return doc
}

export fn delete(collection, id) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    if !has_key(data, collection) {
        return false
    }
    
    let docs = data[collection]
    let new_docs = []
    let deleted = false
    
    for doc in docs {
        if doc["id"] != id {
            push(new_docs, doc)
        } else {
            deleted = true
        }
    }
    
    data[collection] = new_docs
    
    if deleted {
        log("[DB] Deleted from " + collection + ": " + id)
    }
    
    return deleted
}

export fn query(collection, filter) {
    if !is_connected() {
        throw "Database not connected"
    }
    
    if !has_key(data, collection) {
        return []
    }
    
    let results = []
    for doc in data[collection] {
        if matches_filter(doc, filter) {
            push(results, doc)
        }
    }
    
    return results
}

fn matches_filter(doc, filter) {
    for key in keys(filter) {
        if !has_key(doc, key) || doc[key] != filter[key] {
            return false
        }
    }
    return true
}

