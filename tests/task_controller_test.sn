// Task Controller Tests

import "../src/controllers/task_controller.sn" as TaskController
import "../src/utils/logger.sn" as logger

fn test_create_task() {
    logger.info("Testing task creation...")
    
    let task = TaskController.create_task(
        "Test Task",
        "High",
        "user_123"
    )
    
    assert(task["title"] == "Test Task", "Task title should match")
    assert(task["priority"] == "High", "Task priority should be High")
    assert(task["status"] == "pending", "New task should be pending")
    assert(task["assigned_to"] == "user_123", "Task should be assigned to user")
    
    logger.info("✓ test_create_task passed")
}

fn test_invalid_priority() {
    logger.info("Testing invalid priority validation...")
    
    let error_caught = false
    try {
        TaskController.create_task("Test", "Invalid", "user_123")
    } catch err {
        error_caught = true
    }
    
    assert(error_caught, "Should throw error for invalid priority")
    logger.info("✓ test_invalid_priority passed")
}

fn test_complete_task() {
    logger.info("Testing task completion...")
    
    let task = TaskController.create_task("Test", "Low", "user_123")
    let completed = TaskController.complete_task(task["id"])
    
    assert(completed["status"] == "completed", "Task should be completed")
    assert(completed["completed_at"] != null, "Should have completion timestamp")
    
    logger.info("✓ test_complete_task passed")
}

fn test_get_statistics() {
    logger.info("Testing statistics...")
    
    // Create some tasks
    TaskController.create_task("Task 1", "High", "user_123")
    TaskController.create_task("Task 2", "Medium", "user_123")
    let task3 = TaskController.create_task("Task 3", "Low", "user_123")
    
    // Complete one task
    TaskController.complete_task(task3["id"])
    
    let stats = TaskController.get_statistics()
    assert(stats["total"] >= 3, "Should have at least 3 tasks")
    assert(stats["completed"] >= 1, "Should have at least 1 completed task")
    assert(stats["high_priority"] >= 1, "Should have at least 1 high priority task")
    
    logger.info("✓ test_get_statistics passed")
}

fn run_tests() {
    logger.info("")
    logger.info("=== Running Task Controller Tests ===")
    
    test_create_task()
    test_invalid_priority()
    test_complete_task()
    test_get_statistics()
    
    logger.info("")
    logger.info("All Task Controller tests passed!")
}

// Run tests when file is executed
run_tests()